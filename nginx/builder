#!/bin/bash
# Nginx auto docker in debian
# Powered by cr: zhangchaoren@openeasy.net


PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

WORK_HOME=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
BUILD_PATH=/usr
NGINX_VERSION=1.12.2
# 探测cpu核心数
if [ -f /proc/cpuinfo ]; then
    j="-j$(grep 'model name' /proc/cpuinfo | wc -l || 1)"
fi

check_source_file() {
    if [ ! -s nginx-${NGINX_VERSION}.tar.gz ]; then
        # 检查并安装 wget
        dpkg -V wget || apt update && apt install -y wget

        wget -c http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz || exit 1
    fi
}

check_build_tools() {
    dpkg -V gcc g++ make patch || DPKG_RESULT=true

    if [ $DPKG_RESULT ]; then
        apt update

        # 安装编译工具
        apt install -y --force-yes gcc g++ make patch
    fi
}

check_build_deps() {
    dpkg -V gcc g++ make patch libpcre3-dev zlib1g-dev libssl-dev libjemalloc-dev || DPKG_RESULT=true

    if [ $DPKG_RESULT ]; then
        apt update

        # 安装依赖
        apt install -y --force-yes gcc g++ make patch libpcre3-dev zlib1g-dev libssl-dev libjemalloc-dev
    fi
}

build_nginx() {
    check_source_file
    check_build_tools
    check_build_deps
    
    tar xf nginx-${NGINX_VERSION}.tar.gz && cd nginx-${NGINX_VERSION}

    ./configure --prefix=$BUILD_PATH \
    --sbin-path=$BUILD_PATH/sbin/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \
    --pid-path=/var/run/nginx.pid \
    --lock-path=/var/lock/nginx.lock \
    --http-client-body-temp-path=/var/cache/nginx/client_temp \
    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
    --user=www --group=www \
    --with-http_ssl_module \
    --with-http_realip_module \
    --with-http_addition_module \
    --with-http_sub_module \
    --with-http_dav_module \
    --with-http_flv_module \
    --with-http_mp4_module \
    --with-http_gzip_static_module \
    --with-http_random_index_module \
    --with-http_secure_link_module \
    --with-http_stub_status_module \
    --with-mail \
    --with-mail_ssl_module \
    --with-file-aio \
    --with-ipv6 \
    --with-threads \
    --with-cpp_test_module \
    --with-stream \
    --with-cc-opt='-O2 -g -m64 -mtune=generic' \
    --with-ld-opt="-ljemalloc"

    make
}

# if [ ! -x "/usr/sbin/nginx" ]; then
#     build_nginx

#     cp -r /conf/* /etc/nginx/

#     cd /etc/nginx/

#     cp fastcgi.conf  fastcgi.conf.default
#     cp fastcgi_params  fastcgi_params.default
#     cp koi-utf  koi-utf.default
#     cp koi-win  koi-win.default
#     cp mime.types  mime.types.default
#     cp nginx.conf  nginx.conf.default
#     cp scgi_params  scgi_params.default
#     cp uwsgi_params uwsgi_params.default
#     cp win-utf win-utf.default
# fi

# # 创建目录及修改权限
# mkdir -p /var/cache/nginx /var/log/nginx
# chown -R www:www /var/cache/nginx /var/log/nginx

# /usr/sbin/nginx -g "daemon off;"


TMP_VAR=$NGINX_VERSION
printf "请输入要安装的版本 (默认 ${TMP_VAR}):\\n"
read NGINX_VERSION
if [ "$NGINX_VERSION" = "" ]; then
    NGINX_VERSION=${TMP_VAR}
fi

build_nginx

mkdir -p $WORK_HOME/dist/nginx/sbin
cp objs/nginx $WORK_HOME/dist/nginx/sbin
cp -r conf html $WORK_HOME/dist/nginx

cd $WORK_HOME/dist/nginx/conf

cp fastcgi.conf  fastcgi.conf.default
cp fastcgi_params  fastcgi_params.default
cp koi-utf  koi-utf.default
cp koi-win  koi-win.default
cp mime.types  mime.types.default
cp nginx.conf  nginx.conf.default
cp scgi_params  scgi_params.default
cp uwsgi_params uwsgi_params.default
cp win-utf win-utf.default

cp -r ${WORK_HOME}/conf $WORK_HOME/dist/nginx

docker build -t nginx:$NGINX_VERSION $WORK_HOME
