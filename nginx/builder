#!/bin/bash
#
# 作者：Skygangsta<skygangsta@hotmail.com>
#
# Nginx 编译脚本，仅支持 Debian 系 Linux 系统

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

WORK_HOME=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
NGINX_VERSION=1.15.9
NGINX_VERSION_MAJOR=`printf $NGINX_VERSION | awk -F '.' '{print $1}'`
NGINX_VERSION_MINOR=`printf $NGINX_VERSION | awk -F '.' '{print $2}'`
BUILD_PREFIX=/usr
INSTALL_PREFIX=${WORK_HOME}/dist/nginx-${NGINX_VERSION}

# 探测cpu核心数
if [ -f /proc/cpuinfo ]; then
    j="-j$(grep 'model name' /proc/cpuinfo | wc -l || 1)"
fi

check_source_file() {
    if [ ! -s "${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz" ]; then
        # 检查并安装 wget
        dpkg -V wget || sh -c "apt update && apt install -y wget"

        if [ ! -d "${WORK_HOME}/src" ]; then
            mkdir -p "${WORK_HOME}/src"
        fi

        wget -c http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \
            -O ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz
        if [ $? -ne 0 ]; then
            rm -rf ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz
            exit $?
        fi
    fi
}

check_build_tools() {
    # 安装编译工具
    dpkg -V gcc g++ make patch || sh -c "\
        apt update && \
        apt install -y gcc g++ make patch"
}

check_install_deps() {
    # 安装依赖
    dpkg -V libpcre3-dev zlib1g-dev libssl-dev libjemalloc-dev || sh -c " \
        apt update && \
        apt install -y libpcre3-dev zlib1g-dev libssl-dev libjemalloc-dev"
}

configure() {
    if [ -f "${WORK_HOME}/src/nginx-${NGINX_VERSION}/Makefile" ]; then
        clean
    fi

    # TMP_VAR=$NGINX_VERSION
    # printf "请输入要安装的版本 (默认 ${TMP_VAR}):\\n"
    # read NGINX_VERSION
    # if [ "$NGINX_VERSION" = "" ]; then
    #     NGINX_VERSION=1.15.9
    # fi

    check_source_file
    check_build_tools
    check_install_deps

    echo "Start configuring nginx..."

    tar xf ${WORK_HOME}/src/nginx-${NGINX_VERSION}.tar.gz -C ${WORK_HOME}/src && \
        cd ${WORK_HOME}/src/nginx-${NGINX_VERSION}

    ./configure --prefix=$BUILD_PREFIX \
    --sbin-path=$BUILD_PREFIX/sbin/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \
    --pid-path=/var/run/nginx.pid \
    --lock-path=/var/lock/nginx.lock \
    --http-client-body-temp-path=/var/cache/nginx/client_temp \
    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
    --user=www --group=www \
    --with-http_ssl_module \
    --with-http_realip_module \
    --with-http_addition_module \
    --with-http_sub_module \
    --with-http_dav_module \
    --with-http_flv_module \
    --with-http_mp4_module \
    --with-http_gzip_static_module \
    --with-http_random_index_module \
    --with-http_secure_link_module \
    --with-http_stub_status_module \
    --with-http_v2_module \
    --with-mail \
    --with-mail_ssl_module \
    --with-file-aio \
    --with-cpp_test_module \
    --with-debug \
    --with-threads \
    --with-stream \
    --with-cc-opt='-O2 -g -m64 -mtune=generic' \
    --with-ld-opt="-ljemalloc"

    echo "Finished."
}

build() {
    if [ ! -f "${WORK_HOME}/src/nginx-${NGINX_VERSION}/Makefile" ]; then
        configure
    fi

    echo "Start building nginx..."

    cd ${WORK_HOME}/src/nginx-${NGINX_VERSION}

    make $j

    if [ $? -ne 0 ]; then
        echo -e "\033[31m[ERROR] Compile encountered with an error.\033[0m"
        exit 1
    fi

    echo "Finished."
}

install() {
    if [ ! -x "${WORK_HOME}/src/nginx-${NGINX_VERSION}/objs/nginx" ]; then
        build
    fi

    echo "Start installing nginx..."

    cd ${WORK_HOME}/src/nginx-${NGINX_VERSION}

    mkdir -p ${INSTALL_PREFIX}/sbin

    if [ $? -ne 0 ]; then
        echo -e "\033[31m[ERROR] Installation encountered with an error.\033[0m"
        exit 1
    fi

    cp objs/nginx ${INSTALL_PREFIX}/sbin
    cp -r conf html ${INSTALL_PREFIX}

    cd ${INSTALL_PREFIX}/conf

    cp fastcgi.conf fastcgi.conf.default
    cp fastcgi_params fastcgi_params.default
    cp koi-utf koi-utf.default
    cp koi-win koi-win.default
    cp mime.types mime.types.default
    cp nginx.conf nginx.conf.default
    cp scgi_params scgi_params.default
    cp uwsgi_params uwsgi_params.default
    cp win-utf win-utf.default

    cp -r ${WORK_HOME}/conf ${INSTALL_PREFIX}

    echo "Finished."
}

clean() {
    if [ -f ${INSTALL_PREFIX}/cache/nginx.pid ]; then
        stop
    fi

    echo "Start cleaning nginx..."

    if [ -d "${WORK_HOME}/src/nginx-${NGINX_VERSION}" ]; then
        rm -rf "${WORK_HOME}/src/nginx-${NGINX_VERSION}"
    fi

    if [ -a "${WORK_HOME}/dist" ]; then
        rm -rf ${WORK_HOME}/dist
    fi

    echo "Finished."
}

docker_env() {
    echo "Start initializing docker env..."

    docker ps -a | grep build_nginx_image_${NGINX_VERSION} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        # 容器未创建，选择系统版本
        if [ ${NGINX_VERSION_MAJOR} -ge 1 ]; then
            if [ ${NGINX_VERSION_MINOR} -gt 2 ]; then
                # 大于 1.2 使用 debian 9: stretch 镜像
                IMAGE_NAME=debian:stretch
            else
                # 小于 1.2 使用 debian 8: jessie 镜像
                IMAGE_NAME=debian:jessie
            fi
        else
            # 小于 1.2 使用 debian 8: jessie 镜像
            IMAGE_NAME=debian:jessie
        fi
        # 创建容器
        docker run --name build_nginx_image_${NGINX_VERSION} \
            --volume=${WORK_HOME}:/data \
            --volume=/usr/bin/docker:/usr/bin/docker \
            --volume=/var/run/docker.sock:/var/run/docker.sock \
            --cpu-shares=1024 --memory=512m --memory-swap=-1 \
            --oom-kill-disable=true \
            -t -i -d ${IMAGE_NAME} || exit 1
    else
        docker ps | grep build_nginx_image_${NGINX_VERSION} > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            docker start build_nginx_image_${NGINX_VERSION} || exit 1
        fi
    fi

    echo "Finished."
}

add_apt_source_stretch() {
    sed -i "s/^FROM debian:.*$/FROM debian:stretch/g" ${WORK_HOME}/Dockerfile
    sed -i "s/deb\ http:\/\/.*main/deb\ http:\/\/mirrors.163.com\/debian\/\ stretch\ main/g" ${WORK_HOME}/Dockerfile

    if [ -r /.dockerenv ]; then
        echo "deb http://mirrors.163.com/debian/ stretch main" > /etc/apt/sources.list
    fi
}

add_apt_source_jessie() {
    sed -i "s/^FROM debian:.*$/FROM debian:jessie/g" ${WORK_HOME}/Dockerfile
    sed -i "s/deb\ http:\/\/.*main/deb\ http:\/\/mirrors.163.com\/debian\/\ jessie\ main/g" ${WORK_HOME}/Dockerfile

    if [ -r /.dockerenv ]; then
        echo "deb http://mirrors.163.com/debian/ jessie main" > /etc/apt/sources.list
    fi
}

build_docker_images() {
    if [ ${NGINX_VERSION_MAJOR} -ge 1 ]; then
        if [ ${NGINX_VERSION_MINOR} -gt 2 ]; then
            # 大于 1.2 使用 debian 9: stretch 镜像
            add_apt_source_stretch
        else
            add_apt_source_jessie
        fi
    else
        add_apt_source_jessie
    fi

    # 清理之前编译的数据
    clean
    # 安装编译 nginx
    install

    echo "Start building docker image..."
    # 修改 Dockerfile 中的 nginx 版本
    sed -i "s|COPY dist/nginx-.* /nginx|COPY dist/nginx-${NGINX_VERSION} /nginx|g" ${WORK_HOME}/Dockerfile
    # 检查 docker 依赖
    dpkg -V libltdl-dev || apt update && apt install -y libltdl-dev
    # 创建 nginx 镜像
    docker build -t nginx:$NGINX_VERSION $WORK_HOME

    echo "Finished."
    
    # 清理编译之后的数据
    clean
}

case "$1" in
    build)
        # 创建 nginx docker 构建容器
        docker_env

        docker exec -it build_nginx_image_${NGINX_VERSION} /data/builder images

        exit 0
    ;;
    images)
        build_docker_images

        exit 0
    ;;
    *)
        echo $"Usage: {build | images}"
        exit 1
    ;;
esac
